name: CI

on:
  push:
  workflow_dispatch:

env:
  GH_IMAGE_ID: ghcr.io/${{ github.repository_owner }}/tg-likes-bot
  YA_IMAGE_ID: cr.yandex/${{ secrets.YA_CR_ID }}/tg-likes-bot

jobs:

  # version:

  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: write
  #     issues: write
  #     pull-requests: write
  
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Semantic Release
  #       uses: cycjimmy/semantic-release-action@v3
  #       if: github.ref == 'refs/heads/master'
  #       id: semantic
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Make version
  #       run: |
  #         echo -n $(git describe --tags --always | cut -c 2-) > version

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: version
  #         path: version

  # build:
  #   needs:
  #     - version

  #   runs-on: ubuntu-latest
    
  #   permissions:
  #     packages: write
  #     contents: read

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: version
  #         path: /tmp/artifacts/

  #     - name: Build and push Docker image
  #       id: build
  #       run: |
  #         VERSION=$(cat /tmp/artifacts/version)
  #         docker build . --file Dockerfile --tag $GH_IMAGE_ID:$VERSION --tag $GH_IMAGE_ID:latest
  #         echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  #         docker push $GH_IMAGE_ID:$VERSION
  #         echo "image=$GH_IMAGE_ID:$VERSION" >> $GITHUB_OUTPUT

  #   outputs:
  #     image: ${{ steps.build.outputs.image }}

  # quality:
  #   needs:
  #     - build

  #   runs-on: ubuntu-latest

  #   services:
  #     postgres:
  #       image: postgres:14
  #       env:
  #         POSTGRES_USER: bot
  #         POSTGRES_PASSWORD: bot
  #         POSTGRES_DB: bot
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   container:
  #     image: ${{ needs.build.outputs.image }}
  #     env:
  #       APP_DB_HOST: postgres

  #   steps:
  #     - name: Run tests
  #       run: |
  #         cd /app
  #         scripts/lint.sh
  #         # scripts/test.sh

  deploy:

    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Yandex SLS Containers
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          YC_AUTH='--token ${{ secrets.YA_OAUTH }} --folder-id ${{ secrets.YA_FOLDER_ID }}'
          SECRET_ID=$(~/yandex-cloud/bin/yc $YC_AUTH --format json lockbox secret get --name tg-likes-bot | jq -r '.id')
          jq -V
          ~/yandex-cloud/bin/yc $YC_AUTH --format json lockbox secret get --name tg-likes-bot | jq -r '.current_version.payload_entry_keys."[]"'
